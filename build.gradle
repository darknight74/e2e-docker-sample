buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.8.13"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
    id "org.jetbrains.kotlin.plugin.jpa" version "1.3.21"
    id 'org.springframework.boot' version '2.1.2.RELEASE'
    id 'com.bmuschko.docker-spring-boot-application' version '4.4.1'
    id "com.adarshr.test-logger" version "1.6.0"
    id "org.flywaydb.flyway" version "5.2.4"
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'docker-compose'


group = 'com.fabris'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

// Import task types
import com.bmuschko.gradle.docker.tasks.container.*

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }

    e2eTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    e2eTestImplementation.extendsFrom testImplementation
    e2eTestRuntimeOnly.extendsFrom testRuntimeOnly
}

flyway {
    url = "jdbc:postgresql://localhost:5433/postgres?currentSchema=public"
    user = "postgres"
    password = "postgresql"
}

test {
    useJUnitPlatform()
}

task createContainer(type: DockerCreateContainer) {
    dependsOn dockerBuildImage
    targetImageId dockerBuildImage.getImageId()
    containerName = "dockerDemoE2E"
    portBindings = ['8080:8080']
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId "dockerDemoE2E"
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId "dockerDemoE2E"
}

task removeContainer(type: DockerRemoveContainer) {
    dependsOn stopContainer
    removeVolumes = true
    force = true
    targetContainerId "dockerDemoE2E"
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

task e2eTest(type: Test) {
    useJUnitPlatform()
    description = 'Runs e2e tests.'
    group = 'verification'

    testClassesDirs = sourceSets.e2eTest.output.classesDirs
    classpath = sourceSets.e2eTest.runtimeClasspath
    shouldRunAfter integrationTest
    doFirst {
        def appInfo = dockerCompose.servicesInfos.app_e2e.firstContainer
        systemProperty 'E2E_SERVER_PORT', appInfo.ports[8080]
    }
//    dependsOn startContainer
//    finalizedBy removeContainer
}

composeUp {
    dependsOn dockerBuildImage
    finalizedBy flywayMigrate
}

dockerCompose.isRequiredBy(e2eTest)
dockerCompose {
    useComposeFiles = ["src/e2eTest/resources/e2e-docker-compose.yaml"]
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    compile "org.postgresql:postgresql:42.2.4"
    integrationTestImplementation "com.h2database:h2"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.2'
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '1.8'
    }
}

